// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	command "github.com/nodece/casbin-hraft-dispatcher/command"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddPolicy mocks base method
func (m *MockStore) AddPolicy(request *command.AddPolicyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicy", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPolicy indicates an expected call of AddPolicy
func (mr *MockStoreMockRecorder) AddPolicy(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicy", reflect.TypeOf((*MockStore)(nil).AddPolicy), request)
}

// RemovePolicy mocks base method
func (m *MockStore) RemovePolicy(request *command.RemovePolicyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicy", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePolicy indicates an expected call of RemovePolicy
func (mr *MockStoreMockRecorder) RemovePolicy(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicy", reflect.TypeOf((*MockStore)(nil).RemovePolicy), request)
}

// RemoveFilteredPolicy mocks base method
func (m *MockStore) RemoveFilteredPolicy(request *command.RemoveFilteredPolicyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFilteredPolicy", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFilteredPolicy indicates an expected call of RemoveFilteredPolicy
func (mr *MockStoreMockRecorder) RemoveFilteredPolicy(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilteredPolicy", reflect.TypeOf((*MockStore)(nil).RemoveFilteredPolicy), request)
}

// UpdatePolicy mocks base method
func (m *MockStore) UpdatePolicy(request *command.UpdatePolicyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicy indicates an expected call of UpdatePolicy
func (mr *MockStoreMockRecorder) UpdatePolicy(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockStore)(nil).UpdatePolicy), request)
}

// ClearPolicy mocks base method
func (m *MockStore) ClearPolicy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearPolicy")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearPolicy indicates an expected call of ClearPolicy
func (mr *MockStoreMockRecorder) ClearPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearPolicy", reflect.TypeOf((*MockStore)(nil).ClearPolicy))
}

// JoinNode mocks base method
func (m *MockStore) JoinNode(serverID, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinNode", serverID, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinNode indicates an expected call of JoinNode
func (mr *MockStoreMockRecorder) JoinNode(serverID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinNode", reflect.TypeOf((*MockStore)(nil).JoinNode), serverID, address)
}

// RemoveNode mocks base method
func (m *MockStore) RemoveNode(serverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNode", serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNode indicates an expected call of RemoveNode
func (mr *MockStoreMockRecorder) RemoveNode(serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNode", reflect.TypeOf((*MockStore)(nil).RemoveNode), serverID)
}

// Leader mocks base method
func (m *MockStore) Leader() (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leader")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Leader indicates an expected call of Leader
func (mr *MockStoreMockRecorder) Leader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leader", reflect.TypeOf((*MockStore)(nil).Leader))
}
